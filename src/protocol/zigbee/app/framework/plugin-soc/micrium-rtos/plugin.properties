name=Micrium RTOS
description=This plugin provides Micrium OS support. If this plugin is enabled, the stack will be running within Micrium OS as a Micrium OS task. The application can also define up to 3 custom Micrium OS tasks.

category=Utility
qualityString=Production Ready
quality=production
includedByDefault=false

architecture=efr32+iar,simulation

providedApis=micrium-rtos,rtos-instance
requiredApis=mbedtls

# This makes the plugin not throw an error if files are missing, but only show it as disabled.
missingFileHandling=disable

sourceFiles=

# Micrium Silicon Labs BSP files.
$MICRIUM_OS/ports/source/generic/arm_cpu_dwt_ts.c (efr32)

# Micrium RTOS common files.
$MICRIUM_OS/common/source/rtos/rtos_err_str.c

# Micrium RTOS common KAL files.
$MICRIUM_OS/common/source/kal/kal_kernel.c

# Micrium CPU core files (common to all platforms and compilers)
$MICRIUM_OS/cpu/source/cpu_core.c

# Micrium RTOS Kernel files (common to all platforms and compilers)
$MICRIUM_OS/kernel/source/os_cfg_app.c
$MICRIUM_OS/kernel/source/os_core.c
$MICRIUM_OS/kernel/source/os_dbg.c
$MICRIUM_OS/kernel/source/os_flag.c
$MICRIUM_OS/kernel/source/os_mon.c
$MICRIUM_OS/kernel/source/os_msg.c
$MICRIUM_OS/kernel/source/os_mutex.c
$MICRIUM_OS/kernel/source/os_prio.c
$MICRIUM_OS/kernel/source/os_q.c
$MICRIUM_OS/kernel/source/os_sem.c
$MICRIUM_OS/kernel/source/os_stat.c
$MICRIUM_OS/kernel/source/os_task.c
$MICRIUM_OS/kernel/source/os_time.c
$MICRIUM_OS/kernel/source/os_tmr.c
$MICRIUM_OS/kernel/source/os_var.c
$MICRIUM_OS/kernel/source/cmsis_os2.c

# Micrium RTOS Lib files (common to all platforms and compilers)
$MICRIUM_OS/common/source/lib/lib_ascii.c
$MICRIUM_OS/common/source/lib/lib_math.c
$MICRIUM_OS/common/source/lib/lib_mem.c
$MICRIUM_OS/common/source/lib/lib_str.c

# M4 specific CPU files (IAR)
# TODO: these should be (efr32+iar) but it doesn't work. This should be do-able after gcc support is in.
$MICRIUM_OS/ports/source/iar/armv7m_cpu_c.c           (efr32)
$MICRIUM_OS/ports/source/iar/armv7m_cpu_a.asm         (efr32)

# ARMv7-M specific CPU files (IAR)
# TODO: these should be (efr32+iar) but it doesn't work. This should be do-able after gcc support is in.
$MICRIUM_OS/ports/source/iar/armv7m_os_cpu_c.c        (efr32)
$MICRIUM_OS/ports/source/iar/armv7m_os_cpu_a.asm      (efr32)

# cmsis layer
$MICRIUM_OS/kernel/source/cmsis_os2.c

# TODO: add files for other compilers and platforms.

setup(additionalFiles) {
  PATH(ABSOLUTE):$FRAMEWORK/plugin-soc/micrium-rtos/config
  PATH(ABSOLUTE):$COMMON/inc
  PATH(ABSOLUTE):$MICRIUM_OS/
  PATH(ABSOLUTE):$MICRIUM_OS/kernel/include
  PATH(ABSOLUTE):$MICRIUM_OS/common/include
  PATH(ABSOLUTE):$MICRIUM_OS/bsp/siliconlabs/generic/include
  PATH(ABSOLUTE):$CMSIS/RTOS2/Include
}

setup(macros){
  -DMICRIUMOS
  -DSL_CATALOG_MICRIUMOS_KERNEL_PRESENT
}

